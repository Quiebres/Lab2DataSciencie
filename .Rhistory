source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
View(testSet)
View(testSet)
View(trainSet)
View(trainSet)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 1/Lab1-DS/lab1.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
View(trainCuan)
View(trainCuan)
View(trainSet)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
View(Mmatriz)
View(Mmatriz)
View(Mmatriz)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
View(datoSig)
View(datoSig)
View(datoSig)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
source('~/Tercer año/Semestre 6/Data Science/Laboratorio 2/Lab2DataSciencie/Laboratiorio2.R', echo=TRUE)
require(ggpubr) # Para mejorar la visualización gráfica
require(tidyverse) # Para explotar, manipular y visualizar datos que comparten info
require(corrplot) # Para visualizar la matriz de correlación
require(cluster) #Para calcular la silueta
library(fpc) # Para hacer el plotcluster
library(NbClust) # Para determinar el numero de clusters optimo
library(factoextra) # Para hacer graficos bonitos de clustering
library(rela) # Para poder utilizar paf()
library(psych) # Para poder utilizar KMO()
library(FactoMineR)
library(corrplot)
library(REdaS)
library(ggplot2) # Graficas bonitas
library(ggpubr) # Graficas bonitas x2
#library(ggmap)
library(arules) # Reglas de asociacion
library(factoextra)
library(arulesViz)
# Leyendo el dataset de csv
train <- read.csv("train.csv", TRUE, ",")
# Volviendo el csv en un data frame
class(train)
# Se separan las variables cuantitativas del dataset train
trainCuan <- train[,c(4,5,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81)]
# Se separan las variables cualitativas del dataset train
trainCual <- train[,-c(4,5,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81)]
muestra<-sample(1:nrow(compPrincipales),porciento*nrow(compPrincipales)) #Muestra aleatoria de numeros de un vector
exteriorVivienda <- 0.103 * trainCuan$OverallCond + 0.113 * trainCuan$LotFrontage
temporadaCompra <- 0.355 * trainCuan$X3SsnPorch + 0.152 * trainCuan$PoolArea + 0.105 * trainCuan$MoSold
sotano <- 0.041 * trainCuan$BsmtFinSF1 + 0.345 * trainCuan$BsmtFinSF2
tamanoPrecio <-  0.49 * trainCuan$X1stFlrSF + 0.11 * trainCuan$X2ndFlrSF + 0.64 * trainCuan$GrLivArea + 0.57 * trainCuan$GarageCars + 0.55 * trainCuan$GarageArea # + 0.794 * trainCuan$SalePrice
areaMalaCal <- 0.43 * trainCuan$LowQualFinSF
ventaPrecio <- trainCuan$SalePrice
calidad <- 0.667*trainCuan$OverallQual
compPrincipales <- cbind(exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, ventaPrecio, calidad)
compPrincipales <- as.data.frame(compPrincipales)
set.seed(123)
porciento <- 60/100 #Porciento en el que se partirán los datos
muestra<-sample(1:nrow(compPrincipales),porciento*nrow(compPrincipales))
compPrincipales <- na.omit(compPrincipales)
trainSet<-compPrincipales[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-compPrincipales[-muestra,]
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
abline(trainModel)
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
summary(trainModel) # Resumen del modelo con un R^2 de 0.78
trainModel$coefficients
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
summary(trainModel) # Resumen del modelo con un R^2 de 0.78
#las variables seleccionadas fueron tamano precio, exterior y calidad
#modelo mejorado
modelNew <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, data = trainSet)
summary(modelNew)
summary(trainModel) # Resumen del modelo con un R^2 de 0.78
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
library(ggmap)
abline(trainModel)
modeloPrediccion <- predict(modelNew, newdata = testSet[,2:ncol(testSet)])
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$pred-testSet$modeloNew)
testSet$pred <-NULL
testSet$pred
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$pred-testSet$modeloNew)
testSet$pred
#las variables seleccionadas fueron tamano precio, exterior y calidad
#modelo mejorado
modelNew <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, data = trainSet)
abline(trainModel)
#las variables seleccionadas fueron tamano precio, exterior y calidad
#modelo mejorado
modelNew <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, data = trainSet)
summary(modelNew)
confint(modelNew)
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra  trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
require(ggpubr) # Para mejorar la visualización gráfica
require(tidyverse) # Para explotar, manipular y visualizar datos que comparten info
require(corrplot) # Para visualizar la matriz de correlación
require(cluster) #Para calcular la silueta
library(fpc) # Para hacer el plotcluster
library(NbClust) # Para determinar el numero de clusters optimo
library(factoextra) # Para hacer graficos bonitos de clustering
library(rela) # Para poder utilizar paf()
library(psych) # Para poder utilizar KMO()
library(FactoMineR)
library(corrplot)
library(REdaS)
library(ggplot2) # Graficas bonitas
library(ggpubr) # Graficas bonitas x2
library(ggmap)
library(arules) # Reglas de asociacion
library(factoextra)
library(arulesViz)
pairs(comparacion, col = "red")
#Se crea un data frame que almacena las componentes principales y la variable precio de venta
comparacion <- as.data.frame(cbind(exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, ventaPrecio, calidad))
pairs(comparacion, col = "red")
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
trainModel$coefficients
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
abline(trainModel)
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(modelNew)
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(modelNew)
lines(sort(trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad), fitted(lm2)[order(trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad)], col = "blue",
lty = 2)
lines(sort(trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad), fitted(modelNew)[order(trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad)], col = "blue",
lty = 2)
lines(sort(trainSet$tamanoPrecio), fitted(modelNew)[order(trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad)], col = "blue",
lty = 2)
lines(sort(trainSet$tamanoPrecio), fitted(modelNew)[order(trainSet$tamanoPrecio)], col = "blue",
lty = 2)
abline(modelNew)
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
trainModel$coefficients
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
# prediccion<-predict(modeloLinealMulti,newdata = testSet[,1:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$pred<-prediccion
# prediccion<-predict(modeloLinealMulti,newdata = testSet[,1:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$pred<-modeloPrediccion
#predicci?n
prediccion<-predict(modeloLinealSimple,newdata = testSet[,2:ncol(testSet)])
modeloLinealSimple<-lm(mpg~wt, data = trainSet)
summary(modeloLinealSimple)
#predicci?n
prediccion<-predict(modeloLinealSimple,newdata = testSet[,2:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$mpgPred<-prediccion
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$mpgPred-testSet$mpg)
testSet$mpgPred <-NULL
modeloLinealMulti<-lm(mpg~., data = trainSet)
summary(modeloLinealMulti)
#Generaci?n del modelo
modeloLinealMulti<-lm(mpg~., data = trainSet)
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
#predicci?n
prediccion<-predict(modeloLinealMulti,newdata = testSet[,2:ncol(testSet)])
#Generaci?n del modelo
modeloLinealMulti<-lm(mpg~., data = trainSet)
source('~/Downloads/regresiones_y_knn.R', echo=TRUE)
#Generaci?n del modelo
modeloLinealMulti<-lm(mpg~., data = trainSet)
summary(modeloLinealMulti)
#predicci?n
prediccion<-predict(modeloLinealMulti,newdata = testSet[,2:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$mpgPred<-prediccion
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$mpgPred-testSet$mpg)
dif
prediccion
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
# Leyendo el dataset de csv
train <- read.csv("train.csv", TRUE, ",")
# Volviendo el csv en un data frame
class(train)
# Se separan las variables cuantitativas del dataset train
trainCuan <- train[,c(4,5,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81)]
#Particionando los datos en conjunto de entrenamiento y prueba con muestreo aleatorio simple
set.seed(123)
porciento <- 60/100 #Porciento en el que se partirán los datos
muestra<-sample(1:nrow(compPrincipales),porciento*nrow(compPrincipales)) #Muestra aleatoria de numeros de un vector
compPrincipales <- na.omit(compPrincipales)
trainSet<-compPrincipales[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-compPrincipales[-muestra,] #Obtengo las filas de los elementos que no están en el vector de muestra
#-------------------------------------------------
# Regresion Lineal Multivariada
#-------------------------------------------------
#Se crea un data frame que almacena las componentes principales y la variable precio de venta
comparacion <- as.data.frame(cbind(exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, ventaPrecio, calidad))
pairs(comparacion, col = "red")
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
summary(trainModel) # Resumen del modelo con un R^2 de 0.78
trainModel$coefficients
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
?predict
?predict
porciento <- 70/100 #Porciento en el que se partirán los datos
muestra<-sample(1:nrow(datos),porciento*nrow(datos))#Muestra aleatoria de numeros de un vector
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no están en el vector de muestra
#Generaci?n del modelo
modeloLinealSimple<-lm(mpg~wt, data = trainSet)
summary(modeloLinealSimple)
#predicci?n
prediccion<-predict(modeloLinealSimple,newdata = testSet[,2:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$mpgPred<-prediccion
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$mpgPred-testSet$mpg)
testSet$mpgPred <-NULL
dif
testSet$mpgpred
d
s
adf
set.seed(123)
porciento <- 60/100 #Porciento en el que se partirán los datos
muestra<-sample(1:nrow(compPrincipales),porciento*nrow(compPrincipales)) #Muestra aleatoria de numeros de un vector
compPrincipales <- na.omit(compPrincipales)
trainSet<-compPrincipales[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-compPrincipales[-muestra,] #Obtengo las filas de los elementos que no están en el vector de muestra
#Se crea un data frame que almacena las componentes principales y la variable precio de venta
comparacion <- as.data.frame(cbind(exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, ventaPrecio, calidad))
#Modelo de regresión lineal multivariado
trainModel <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda +trainSet$temporadaCompra + trainSet$calidad, data = trainSet)
summary(trainModel) # Resumen del modelo con un R^2 de 0.78
View(trainModel)
View(trainModel)
trainModel$coefficients
# Grafica de las variables
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$temporadaCompra + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
abline(trainModel)
step(object = trainModel, direction = "both", trace = 1)
#las variables seleccionadas fueron tamano precio, exterior y calidad
#modelo mejorado
modelNew <- lm(formula = trainSet$ventaPrecio ~ trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, data = trainSet)
summary(modelNew)
confint(modelNew)
plot(y = trainSet$ventaPrecio, x = trainSet$tamanoPrecio + trainSet$exteriorVivienda + trainSet$calidad, xlab = "Cualidades de la casa/terreno", ylab = "Precio de venta de las casas")
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
# prediccion<-predict(modeloLinealMulti,newdata = testSet[,1:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$pred<-modeloPrediccion
modeloPrediccion
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$pred-testSet$modeloNew)
dif
#Ver la diferencia entre lo real y lo predicho
dif<-abs(testSet$pred-testSet$modeloNew)
testSet$pred <- NULL
dif
testSet$pred
# prediccion<-predict(modeloLinealMulti,newdata = testSet[,1:ncol(testSet)])
# Se agrega la predicci?n al conjunto de entrenamiento
testSet$pred<-modeloPrediccion
confint(modelNew)
summary(modelNew)
modeloPrediccion <- predict(modelNew, newdata = testSet[,1:ncol(testSet)])
?stratified
?stratified
install.packages("splitstackshape")
library(splitstackshape)
?stratified
sampling <- stratified(compPrincipales,0.6)
sampling <- stratified(compPrincipales, size = 0.6)
sampling <- stratified(compPrincipales, group = compPrincipales[,1:nrow(compPrincipales)] , size = 0.6)
sampling <- stratified(compPrincipales, group = compPrincipales[,1:ncol(compPrincipales)] , size = 0.6)
sampling <- stratified(compPrincipales, group = compPrincipales[,1:6] , size = 0.6)
quantile(trainCuan$SalePrice)
trainCuan$precio <- case_when(trainCuan$SalePrice < 131000 ~ 'Bajo',
trainCuan$SalePrice < 219500 ~ 'Medio',
TRUE ~ 'Alto')
nuevoTrainSet <- stratified(trainCuan, c('precio'), 0.5) #Obtengo las filas de los elementos que estan en el sector de nuevaMuestra
install.packages("dplyr")
library(dplyr)
trainCuan$precio <- case_when(trainCuan$SalePrice < 131000 ~ 'Bajo',
trainCuan$SalePrice < 219500 ~ 'Medio',
TRUE ~ 'Alto')
nuevoTrainSet <- stratified(trainCuan, c('precio'), 0.5)
library(splitstackshape)
nuevoTrainSet <- stratified(trainCuan, c('precio'), 0.5)
nuevoTestSet <- trainCuan %>%filter(trainCuan$SalePrice != nuevoTrainSet$SalePrice)
nuevoTrainSet <- stratified(trainCuan, c('precio'), 0.6)
nuevoTrainSet <- stratified(compPrincipales, c('precio'), 0.6)
compPrincipales <- cbind(ventaPrecio,exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, calidad)
compPrincipales <- as.data.frame(compPrincipales)
exteriorVivienda <- 0.103 * trainCuan$OverallCond + 0.113 * trainCuan$LotFrontage
temporadaCompra <- 0.355 * trainCuan$X3SsnPorch + 0.152 * trainCuan$PoolArea + 0.105 * trainCuan$MoSold
sotano <- 0.041 * trainCuan$BsmtFinSF1 + 0.345 * trainCuan$BsmtFinSF2
tamanoPrecio <-  0.49 * trainCuan$X1stFlrSF + 0.11 * trainCuan$X2ndFlrSF + 0.64 * trainCuan$GrLivArea + 0.57 * trainCuan$GarageCars + 0.55 * trainCuan$GarageArea # + 0.794 * trainCuan$SalePrice
areaMalaCal <- 0.43 * trainCuan$LowQualFinSF
ventaPrecio <- trainCuan$SalePrice
calidad <- 0.667*trainCuan$OverallQual
compPrincipales <- cbind(ventaPrecio,exteriorVivienda, temporadaCompra, sotano, tamanoPrecio, areaMalaCal, calidad)
compPrincipales <- as.data.frame(compPrincipales)
nuevoTrainSet <- stratified(compPrincipales, c('precio'), 0.6)
compPrincipales$precio <- case_when(compPrincipales$ventaPrecio < 131000 ~ 'Bajo',
compPrincipales$ventaPrecio < 219500 ~ 'Medio',
TRUE ~ 'Alto')
nuevoTrainSet <- stratified(compPrincipales, c('precio'), 0.6)
nuevoTestSet <- trainCuan %>%filter(trainCuan$SalePrice != nuevoTrainSet$SalePrice)
nuevoTestSet <- compPrincipales[-nuevoTrainSet]
?trainTest
nuevoTestSet <- compPrincipales %>%filter(compPrincipales$ventaPrecio != nuevoTrainSet$ventaPrecio)
?filter
nuevoTestSet <- compPrincipales %>%filter(compPrincipales, compPrincipales$ventaPrecio != nuevoTrainSet$ventaPrecio)
trainTestU = trainTest(compPrincipales,0.6, stratify=TRUE)
nTestSet<-compPrincipales[-nuevoTrainSet,]
nTestSet<-compPrincipales[-nuevoTrainSet,]
nTestSet<-compPrincipales[names(compPrincipales) != nuevoTrainSet$ventaPrecio,]
# }
nTestSet<-compPrincipales[names(compPrincipales) != nuevoTrainSet$precio,]
install.packages("caret")
library(caret)
train.rows<- createDataPartition(compPrincipales$precio, p=0.7, list = FALSE)
train.data<- BreastCancer[train.rows,]
train.data<- compPrincipales[train.rows,]
test.data<- compPrincipales[-train.rows,]
train.rows<- createDataPartition(compPrincipales$precio, p=0.6, list = FALSE)
train.data<- compPrincipales[train.rows,]
test.data<- compPrincipales[-train.rows,]
filas <- createDataPartition(compPrincipales$precio, p=0.6, list = FALSE)
nuevoTrainSet <- compPrincipales[filas,]
nuevoTestSet <- compPrincipales[filas,]
filas <- createDataPartition(compPrincipales$precio, p=0.6, list = FALSE)
nuevoTrainSet <- compPrincipales[filas,]
nuevoTestSet <- compPrincipales[-filas,]
filas <- createDataPartition(compPrincipales$precio, p=0.6, list = FALSE)
nuevoTrainSet <- compPrincipales[filas,] # 60% de datos para entrenamiento
nuevoTestSet <- compPrincipales[-filas,] # 40% de datos para prueba
?knn
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
install.packages(class)
install.packages("class"")
library(class)
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
knn()
knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
library(factoextra)
library(arulesViz)
library(dplyr)
library(caret)
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
#Creacion del modelo
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet, k = 37)
#Creacion del modelo
modelo.knn <- knn(train = nuevoTrainSet, test = nuevoTestSet,
cl = as.factor(nuevoTrainSet$precio), k = 37)
modelo.knn <- knn(nuevoTrainSet, nuevoTestSet,
as.factor(nuevoTrainSet$precio),37)
as.factor(nuevoTrainSet$precio)
matriz.conf <- confusionMatrix(as.factor(nuevoTestSet$precio),predKNN)
matriz.conf
install.packages("class")
install.packages("e1071")
install.packages("class")
library(class) # Para KNN
library(e1071) # Requisito para la matriz de confusión
modelo.KNN <- knn(nuevoTrainSet[,c(2:6)],nuevoTestSet[,c(2:6)],
as.factor(nuevoTrainSet$precio),k=37)
matriz.conf <- confusionMatrix(as.factor(nuevoTestSet$precio), modelo.KNN)
matriz.conf
modelo.KNN <- knn(nuevoTrainSet[,c(2:6)], nuevoTestSet[,c(2:6)],
as.factor(nuevoTrainSet$precio), k=37)
matriz.conf <- confusionMatrix(as.factor(nuevoTestSet$precio), modelo.KNN)
matriz.conf
